# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gps/Gps_data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Gps_data(genpy.Message):
  _md5sum = "2c380b74bb8d27352fa01b8b297ff62f"
  _type = "gps/Gps_data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32  GPSWeek
int32  GPSTime
float32  Heading
float32  Pitch
float32  Roll
float32  gyrox
float32  gyroy
float32  gyroz
float32  accx
float32  accy
float32  accz
float32  Lattitude
float32  Longitude
float32  Altitude
float32  Ve
float32  Vn
float32  Vu
float32  V
int32  NSV1
int32  NSV2
int32  Status
int32  Age
int32  Warming
    
"""
  __slots__ = ['GPSWeek','GPSTime','Heading','Pitch','Roll','gyrox','gyroy','gyroz','accx','accy','accz','Lattitude','Longitude','Altitude','Ve','Vn','Vu','V','NSV1','NSV2','Status','Age','Warming']
  _slot_types = ['int32','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       GPSWeek,GPSTime,Heading,Pitch,Roll,gyrox,gyroy,gyroz,accx,accy,accz,Lattitude,Longitude,Altitude,Ve,Vn,Vu,V,NSV1,NSV2,Status,Age,Warming

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Gps_data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.GPSWeek is None:
        self.GPSWeek = 0
      if self.GPSTime is None:
        self.GPSTime = 0
      if self.Heading is None:
        self.Heading = 0.
      if self.Pitch is None:
        self.Pitch = 0.
      if self.Roll is None:
        self.Roll = 0.
      if self.gyrox is None:
        self.gyrox = 0.
      if self.gyroy is None:
        self.gyroy = 0.
      if self.gyroz is None:
        self.gyroz = 0.
      if self.accx is None:
        self.accx = 0.
      if self.accy is None:
        self.accy = 0.
      if self.accz is None:
        self.accz = 0.
      if self.Lattitude is None:
        self.Lattitude = 0.
      if self.Longitude is None:
        self.Longitude = 0.
      if self.Altitude is None:
        self.Altitude = 0.
      if self.Ve is None:
        self.Ve = 0.
      if self.Vn is None:
        self.Vn = 0.
      if self.Vu is None:
        self.Vu = 0.
      if self.V is None:
        self.V = 0.
      if self.NSV1 is None:
        self.NSV1 = 0
      if self.NSV2 is None:
        self.NSV2 = 0
      if self.Status is None:
        self.Status = 0
      if self.Age is None:
        self.Age = 0
      if self.Warming is None:
        self.Warming = 0
    else:
      self.GPSWeek = 0
      self.GPSTime = 0
      self.Heading = 0.
      self.Pitch = 0.
      self.Roll = 0.
      self.gyrox = 0.
      self.gyroy = 0.
      self.gyroz = 0.
      self.accx = 0.
      self.accy = 0.
      self.accz = 0.
      self.Lattitude = 0.
      self.Longitude = 0.
      self.Altitude = 0.
      self.Ve = 0.
      self.Vn = 0.
      self.Vu = 0.
      self.V = 0.
      self.NSV1 = 0
      self.NSV2 = 0
      self.Status = 0
      self.Age = 0
      self.Warming = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i16f5i.pack(_x.GPSWeek, _x.GPSTime, _x.Heading, _x.Pitch, _x.Roll, _x.gyrox, _x.gyroy, _x.gyroz, _x.accx, _x.accy, _x.accz, _x.Lattitude, _x.Longitude, _x.Altitude, _x.Ve, _x.Vn, _x.Vu, _x.V, _x.NSV1, _x.NSV2, _x.Status, _x.Age, _x.Warming))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 92
      (_x.GPSWeek, _x.GPSTime, _x.Heading, _x.Pitch, _x.Roll, _x.gyrox, _x.gyroy, _x.gyroz, _x.accx, _x.accy, _x.accz, _x.Lattitude, _x.Longitude, _x.Altitude, _x.Ve, _x.Vn, _x.Vu, _x.V, _x.NSV1, _x.NSV2, _x.Status, _x.Age, _x.Warming,) = _struct_2i16f5i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i16f5i.pack(_x.GPSWeek, _x.GPSTime, _x.Heading, _x.Pitch, _x.Roll, _x.gyrox, _x.gyroy, _x.gyroz, _x.accx, _x.accy, _x.accz, _x.Lattitude, _x.Longitude, _x.Altitude, _x.Ve, _x.Vn, _x.Vu, _x.V, _x.NSV1, _x.NSV2, _x.Status, _x.Age, _x.Warming))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 92
      (_x.GPSWeek, _x.GPSTime, _x.Heading, _x.Pitch, _x.Roll, _x.gyrox, _x.gyroy, _x.gyroz, _x.accx, _x.accy, _x.accz, _x.Lattitude, _x.Longitude, _x.Altitude, _x.Ve, _x.Vn, _x.Vu, _x.V, _x.NSV1, _x.NSV2, _x.Status, _x.Age, _x.Warming,) = _struct_2i16f5i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i16f5i = struct.Struct("<2i16f5i")
